// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // collection -> id type String, special decorator as id,
  //                       @id <--- special decorator
  //                            default value as auto() that refer to _id in mongoDB type ObjectId
  //                                             map with '_id
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  // String? <- type of optional String
  name           String?
  // @unique <- decorator as unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversationIds String[]       @db.ObjectId
  // a property which map conversation model as an array
  // using conversationsIds refer to id of the conversation
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  //              Conversation type is created below

  seenMessageIds String[]  @db.ObjectId
  // giving special name as "Seen"
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  //             Message type is created below

  //       Account type is created below
  accounts Account[]
  messages Message[]
}

model Account {
  // This id will be the same as above model
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  // @db.String is not same as String, Thus, '@db.String' is required
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // define the relation of the 'account' with 'user'
  //         relation to field 'userId'
  //                                    references: 'id' (id from User model)
  //                                                      'Cascade' effect when 'delete'
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // combination of 'provider' and 'providerAccountId' need to be unique
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?
  // message
  messageIds    String[]  @db.ObjectId
  messages      Message[]
  // users
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  // seen mesages
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  // conversation
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  // sender
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

// prisma commands
// To push the schema -- npx prisma db push
